import streamlit as st
import hashlib
import json
import os
import time
from cryptography.fernet import Fernet #Fernet is a class from the cryptography library that provides symmetric encryption (same key       used for both encryption and decryption).
from base64 import urlsafe_b64encode    # Turns keys into safe text
from hashlib import pbkdf2_hmac         # Special function to make strong passwords 


STORED_DATA='data.json'
LOCK_OUT_DURATION=60

if "authenticated_user" not in st.session_state:
    st.session_state.authenticated_user = None
if "failed_attempts" not in st.session_state:
    st.session_state.failed_attempts = 0
if "lockout_time" not in st.session_state:
    st.session_state.lockout_time = 0
    
    
def load_data():
    if os.path.exists(STORED_DATA):
        with open(STORED_DATA,'r') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(STORED_DATA,'w') as f:
        json.dump(data,f)
        
def generate_key(passkey,salt):
    key=pbkdf2_hmac('sha256',passkey.encode(),salt.encode(),100000)
    return urlsafe_b64encode(key)

def hash_password(password,salt):
    return hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000).hex()

def encrypt_data(text,key,salt):
    cipher=Fernet(generate_key(key,salt)) #Fernet(generate_key(key)) initializes a Fernet cipher using the key generated by generate_key(). This cipher will be used to encrypt and decrypt data securely.
    return cipher.encrypt(text.encode()).decode()

def decrypt(encrypted_text,key,salt):
    try:
        cipher = Fernet(generate_key(key,salt))
        return cipher.decrypt(encrypted_text.encode()).decode()
    except:
        return None
    

stored_data=load_data()

st.title("üîí Secure Data Encryption System")
menu = ["Home", "Register", "Store Data", "Retrieve Data", "Login", "Logout"]
choice = st.sidebar.selectbox("Navigation",menu)


if choice == "Home":
    st.subheader("üè† Welcome...")
    st.write("Use this app to securely store and retrieve data...")
    
elif choice== 'Register':
    username=st.text_input('Choose Username:')
    password=st.text_input('Choose password',type="password")
    if st.button('Register'):
        if username and password:
            if username in stored_data:
                st.error("User already exists!")
            else:
                user_salt = os.urandom(16).hex()
                stored_data[username]={
                    "salt":user_salt,
                    "password":hash_password(password,user_salt),
                    "data":[]
                }
                save_data(stored_data)
                st.success("User registered!")
                
elif choice=="Store Data":
    if not st.session_state.authenticated_user:
        st.warning('Login first!')
    else:
        user_data=st.text_input("Enter Data:")
        passkey=st.text_input("Passkey:", type="password")
        if user_data and passkey:
            user_salt=stored_data[st.session_state.authenticated_user]['salt']
            encryted_data=encrypt_data(user_data,passkey,user_salt)
            stored_data[st.session_state.authenticated_user]['data'].append(encryted_data)
            save_data(stored_data)
            st.success("Data stored!")
            
elif choice=="Retrieve Data":
    if not st.session_state.authenticated_user:
        st.warning('Login first!')
    else:
        user_data=stored_data.get(st.session_state.authenticated_user,{}).get('data',[])
        if not user_data:
            st.warning('No data found!')
        else:
            for item in user_data:
                st.write(item)
                
            encrypted_text = st.text_input("Enter Encrypted Data:")
            passkey = st.text_input("Enter Passkey:", type="password")
            if st.button('Decrypt'):
                user_salt=stored_data[st.session_state.authenticated_user]['salt']
                decrypted_text=decrypt(encrypted_text,passkey,user_salt)
                if decrypted_text:
                    st.success(f"Decrypted: {decrypted_text}")
                else:
                    st.error("Wrong key or data!")
                    
                    
elif choice=="Login":
    if time.time()<st.session_state.lockout_time:
        remaining=int(st.session_state.lockout_time-time.time())
        st.error(f"Locked out! Try again in {remaining} seconds.")
        st.stop()
    username = st.text_input("Username:")
    password = st.text_input("Password:", type="password")
    if st.button('Login'):
        if username in stored_data and stored_data[username]['password']==hash_password(password,stored_data[username]['salt']):
            st.session_state.authenticated_user = username
            st.session_state.failed_attempts = 0
            st.success("Login successful!")
        else:
            st.session_state.failed_attempts +=1
            remaining_attempts=3-st.session_state.failed_attempts
            st.error(f"Wrong credentials! {remaining_attempts} tries left.")
            if st.session_state.failed_attempts>=3:
                st.session_state.lockout_time=time.time()+LOCK_OUT_DURATION
                st.error("Locked for 60 seconds!")
                st.stop()
                
elif choice == "Logout":
    st.session_state.authenticated_user = None
    st.success("Logged out!")

            
            

            
    